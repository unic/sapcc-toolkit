name: ci

on:
  push:
  pull_request:
    

env:
  SAPMACHINE_VERSION: 17
  IMAGE_NAME: lennartjuetteunic/sapcommerce-build-image

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew check sonarqube --info
      - name: Publish test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Tests
          path: build/test-results/*/TEST-*.xml
          reporter: java-junit
      - name: Publish JAR
        env:
          ORG_GRADLE_PROJECT_unicEcomUsername: ${{ secrets.MAVEN_USER }}
          ORG_GRADLE_PROJECT_unicEcomPassword: ${{ secrets.MAVEN_PASS }}
        run: ./gradlew publish --info
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push the Docker image
        run: |
          VERSION=$(cat build.gradle|grep '^version ='|cut -d"'" -f2)
          TS=$(date +%Y%m%d%H%M%S)
          UNIQUE_TAG="${VERSION}-${TS}"

          docker build . \
            --file Dockerfile \
            --tag $IMAGE_NAME:$UNIQUE_TAG
          docker push $IMAGE_NAME:$UNIQUE_TAG 
          
          docker tag $IMAGE_NAME:$UNIQUE_TAG  $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION
          
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            docker tag $IMAGE_NAME:$UNIQUE_TAG  $IMAGE_NAME:latest
            docker push $IMAGE_NAME:latest
          fi